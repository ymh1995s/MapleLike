// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.Protocol {

  /// <summary>Holder for reflection information generated from Protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for Protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Qcm90b2NvbC5wcm90bxIIUHJvdG9jb2waH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8iDQoLU19Db25uZWN0ZWQiNwoNQ19DbGFzc0Nob2lj",
            "ZRImCgljbGFzc1R5cGUYASABKA4yEy5Qcm90b2NvbC5DbGFzc1R5cGUicAoL",
            "U19FbnRlckdhbWUSDQoFbWFwSWQYASABKAUSEwoLc3Bhd25Qb2ludFgYAiAB",
            "KAISEwoLc3Bhd25Qb2ludFkYAyABKAISKAoKcGxheWVySW5mbxgEIAEoCzIU",
            "LlByb3RvY29sLlBsYXllckluZm8iOgoNU19QbGF5ZXJTcGF3bhIpCgtwbGF5",
            "ZXJJbmZvcxgBIAMoCzIULlByb3RvY29sLlBsYXllckluZm8iPQoOU19Nb25z",
            "dGVyU3Bhd24SKwoMbW9uc3RlckluZm9zGAEgAygLMhUuUHJvdG9jb2wuTW9u",
            "c3RlckluZm8iawoMQ19QbGF5ZXJNb3ZlEiQKBXN0YXRlGAEgASgOMhUuUHJv",
            "dG9jb2wuUGxheWVyU3RhdGUSEQoJcG9zaXRpb25YGAIgASgCEhEKCXBvc2l0",
            "aW9uWRgDIAEoAhIPCgdpc1JpZ2h0GAQgASgIIn0KDFNfUGxheWVyTW92ZRIk",
            "CgVzdGF0ZRgBIAEoDjIVLlByb3RvY29sLlBsYXllclN0YXRlEhAKCHBsYXll",
            "cklkGAIgASgFEhEKCXBvc2l0aW9uWBgDIAEoAhIRCglwb3NpdGlvblkYBCAB",
            "KAISDwoHaXNSaWdodBgFIAEoCCKGAQoNU19Nb25zdGVyTW92ZRIlCgVzdGF0",
            "ZRgBIAEoDjIWLlByb3RvY29sLk1vbnN0ZXJTdGF0ZRIRCgltb25zdGVySWQY",
            "AiABKAUSFAoMZGVzdGluYXRpb25YGAMgASgCEhQKDGRlc3RpbmF0aW9uWRgE",
            "IAEoAhIPCgdpc1JpZ2h0GAUgASgIIg0KC0NfUGxheWVyRGllIh8KC1NfUGxh",
            "eWVyRGllEhAKCHBsYXllcklkGAIgASgFIg0KC1NfTGVhdmVHYW1lIiQKD1Nf",
            "UGxheWVyRGVzcGF3bhIRCglwbGF5ZXJJZHMYASADKAUiJgoQU19Nb25zdGVy",
            "RGVzcGF3bhISCgptb25zdGVySWRzGAEgAygFIrcBCgtTX0l0ZW1TcGF3bhIk",
            "CghpdGVtSW5mbxgBIAEoCzISLlByb3RvY29sLkl0ZW1JbmZvEiwKDGl0ZW1D",
            "YXRlZ29yeRgCIAEoDjIWLlByb3RvY29sLkl0ZW1DYXRlZ29yeRIkCghpdGVt",
            "VHlwZRgDIAEoDjISLlByb3RvY29sLkl0ZW1UeXBlEhwKFGNhbk9ubHlPd25l",
            "ckxvb3RUaW1lGAQgASgFEhAKCGxpZmVUaW1lGAUgASgFIj0KDUNfUGxheWVy",
            "U2tpbGwSLAoJc2tpbGxUeXBlGAEgASgOMhkuUHJvdG9jb2wuUGxheWVyU2tp",
            "bGxUeXBlIk4KDVNfUGxheWVyU2tpbGwSLAoJc2tpbGxUeXBlGAEgASgOMhku",
            "UHJvdG9jb2wuUGxheWVyU2tpbGxUeXBlEg8KB3NraWxsaWQYAiABKAUiVgoO",
            "U19Nb25zdGVyU2tpbGwSEQoJbW9uc3RlcklkGAEgASgFEjEKCXNraWxsVHlw",
            "ZRgCIAEoDjIeLlByb3RvY29sLkJvc3NNb25zdGVyU2tpbGxUeXBlIj0KDENf",
            "SGl0TW9uc3RlchIRCgltb25zdGVySWQYASABKAUSGgoScGxheWVyQXR0YWNr",
            "UG93ZXJzGAIgAygFInQKDFNfSGl0TW9uc3RlchIQCghwbGF5ZXJJZBgBIAEo",
            "BRIRCgltb25zdGVySWQYAiABKAUSDwoHZGFtYWdlcxgDIAMoBRIUCgxtb25z",
            "dGVyTWF4SHAYBCABKAUSGAoQbW9uc3RlckN1cnJlbnRIcBgFIAEoBSIhCg9D",
            "X1BsYXllckRhbWFnZWQSDgoGZGFtYWdlGAEgASgFIjMKD1NfUGxheWVyRGFt",
            "YWdlZBIQCghwbGF5ZXJJZBgBIAEoBRIOCgZkYW1hZ2UYAiABKAUiMAoLQ19D",
            "aGFuZ2VNYXASDQoFbWFwSWQYASABKAUSEgoKc3Bhd25Qb2ludBgCIAEoBSJA",
            "Cg5DX0Jvc3NSZWdpc3RlchIuCg1ib3NzRW50ZXJUeXBlGAEgASgOMhcuUHJv",
            "dG9jb2wuQm9zc0VudGVyVHlwZSIUChJTX0Jvc3NSZWdpc3RlckRlbnkiJQoN",
            "U19Cb3NzV2FpdGluZxIUCgx3YWl0aW5nQ291bnQYASABKAUiDgoMQ19Cb3Nz",
            "Q2FuY2xlIiAKC1NfR2FtZUNsZWFyEhEKCXBsYXllcklkcxgBIAMoBSIqCghT",
            "X0dldEV4cBIRCglwbGF5ZXJJZHMYASABKAUSCwoDZXhwGAIgASgFIhwKCkNf",
            "TG9vdEl0ZW0SDgoGSXRlbUlkGAEgASgFIi4KClNfTG9vdEl0ZW0SEAoIcGxh",
            "eWVySWQYASABKAUSDgoGSXRlbUlkGAIgASgFIh8KDVNfSXRlbURlc3Bhd24S",
            "DgoGSXRlbUlkGAEgASgFIqwBCgpQbGF5ZXJJbmZvEhAKCHBsYXllcklkGAEg",
            "ASgFEgwKBG5hbWUYAiABKAkSEQoJcG9zaXRpb25YGAMgASgCEhEKCXBvc2l0",
            "aW9uWRgEIAEoAhIqCghzdGF0SW5mbxgFIAEoCzIYLlByb3RvY29sLlBsYXll",
            "clN0YXRJbmZvEiwKDUNyZWF0dXJlU3RhdGUYBiABKA4yFS5Qcm90b2NvbC5Q",
            "bGF5ZXJTdGF0ZSK2AQoLTW9uc3RlckluZm8SEQoJbW9uc3RlcklkGAEgASgF",
            "EgwKBG5hbWUYAiABKAkSFAoMZGVzdGluYXRpb25YGAMgASgCEhQKDGRlc3Rp",
            "bmF0aW9uWRgEIAEoAhIrCghzdGF0SW5mbxgFIAEoCzIZLlByb3RvY29sLk1v",
            "bnN0ZXJTdGF0SW5mbxItCg1DcmVhdHVyZVN0YXRlGAYgASgOMhYuUHJvdG9j",
            "b2wuTW9uc3RlclN0YXRlIvoBCg5QbGF5ZXJTdGF0SW5mbxINCgVsZXZlbBgB",
            "IAEoBRImCgljbGFzc1R5cGUYAiABKA4yEy5Qcm90b2NvbC5DbGFzc1R5cGUS",
            "CgoCaHAYAyABKAUSDQoFbWF4SHAYBCABKAUSCgoCbXAYBSABKAUSDQoFbWF4",
            "TXAYBiABKAUSEwoLYXR0YWNrUG93ZXIYByABKAUSEgoKbWFnaWNQb3dlchgI",
            "IAEoBRIPCgdkZWZlbnNlGAkgASgFEg0KBXNwZWVkGAogASgCEgwKBGp1bXAY",
            "CyABKAISEgoKY3VycmVudEV4cBgMIAEoBRIQCgh0b3RhbEV4cBgNIAEoBSKJ",
            "AQoPTW9uc3RlclN0YXRJbmZvEgoKAmlkGAEgASgFEg0KBWxldmVsGAIgASgF",
            "EgoKAmhwGAMgASgFEg0KBW1heEhwGAQgASgFEhMKC2F0dGFja1Bvd2VyGAUg",
            "ASgFEg8KB2RlZmVuc2UYBiABKAUSDQoFc3BlZWQYByABKAISCwoDZXhwGAgg",
            "ASgFImgKCEl0ZW1JbmZvEg4KBml0ZW1JZBgBIAEoBRIPCgdvd25lcklkGAIg",
            "ASgFEhUKDWNhblJvb3RBbnlPbmUYAyABKAgSEQoJcG9zaXRpb25YGAQgASgC",
            "EhEKCXBvc2l0aW9uWRgFIAEoAiIcCglTa2lsbEluZm8SDwoHc2tpbGxJZBgB",
            "IAEoBSrSBAoFTXNnSWQSDwoLU19DT05ORUNURUQQABISCg5DX0NMQVNTX0NI",
            "T0lDRRABEhAKDFNfRU5URVJfR0FNRRACEhIKDlNfUExBWUVSX1NQQVdOEAMS",
            "EwoPU19NT05TVEVSX1NQQVdOEAQSEQoNQ19QTEFZRVJfTU9WRRAFEhEKDVNf",
            "UExBWUVSX01PVkUQBhISCg5TX01PTlNURVJfTU9WRRAHEhAKDENfUExBWUVS",
            "X0RJRRAIEhAKDFNfTEVBVkVfR0FNRRAJEhQKEFNfUExBWUVSX0RFU1BBV04Q",
            "ChIVChFTX01PTlNURVJfREVTUEFXThALEhAKDFNfSVRFTV9TUEFXThAMEhIK",
            "DkNfUExBWUVSX1NLSUxMEA0SEgoOU19QTEFZRVJfU0tJTEwQDhITCg9TX01P",
            "TlNURVJfU0tJTEwQDxIRCg1DX0hJVF9NT05TVEVSEBASEQoNU19ISVRfTU9O",
            "U1RFUhAREhQKEENfUExBWUVSX0RBTUFHRUQQEhIUChBTX1BMQVlFUl9EQU1B",
            "R0VEEBMSEAoMQ19DSEFOR0VfTUFQEBQSEwoPQ19CT1NTX1JFR0lTVEVSEBUS",
            "GAoUU19CT1NTX1JFR0lTVEVSX0RFTlkQFhISCg5TX0JPU1NfV0FJVElORxAX",
            "EhEKDUNfQk9TU19DQU5DTEUQGBIQCgxTX0dBTUVfQ0xFQVIQGRINCglTX0dF",
            "VF9FWFAQGhIPCgtDX0xPT1RfSVRFTRAbEg8KC1NfTE9PVF9JVEVNEBwSEgoO",
            "U19JVEVNX0RFU1BBV04QHSpkCg5HYW1lT2JqZWN0VHlwZRIICgROT05FEAAS",
            "CgoGUExBWUVSEAESEQoNTk9STUFMTU9OU1RFUhACEg8KC0JPU1NNT05TVEVS",
            "EAMSCAoESVRFTRAEEg4KClBST0pFQ1RJTEUQBSo9CglDbGFzc1R5cGUSCQoF",
            "Q05PTkUQABILCgdXQVJSSU9SEAESDAoITUFHSUNJQU4QAhIKCgZBUkNIRVIQ",
            "AypGCg9QbGF5ZXJTa2lsbFR5cGUSEQoNU0tJTExfV0FSUklPUhAAEg4KClNL",
            "SUxMX01BR0UQARIQCgxTS0lMTF9BUkNIRVIQAipmChRCb3NzTW9uc3RlclNr",
            "aWxsVHlwZRIOCgpCT1NTU0tJTEwxEAASDgoKQk9TU1NLSUxMMhABEg4KCkJP",
            "U1NTS0lMTDMQAhIOCgpCT1NTU0tJTEw0EAMSDgoKQk9TU1NLSUxMNRAEKj4K",
            "DEl0ZW1DYXRlZ29yeRILCgdJQ19HT0xEEAASEgoOSUNfSUNPTlNVTUFCTEUQ",
            "ARINCglJQ19JRVFVSVAQAirDAgoISXRlbVR5cGUSCAoER09MRBAAEg0KCUhQ",
            "UE9USU9OMRBkEg0KCUhQUE9USU9OMhBlEg4KCU1QUE9USU9OMRDJARIOCglN",
            "UFBPVElPTjIQygESEQoMU1VQRVJQT1RJT04xEK0CEhEKDFNVUEVSUE9USU9O",
            "MhCuAhIMCgdIRUxNRVQxEOkHEgwKB0hFTE1FVDIQ6gcSCwoGQVJNT1IxENEP",
            "EgsKBkFSTU9SMhDSDxILCgZCT09UUzEQuRcSCwoGQk9PVFMyELoXEgsKBlNX",
            "T1JEMRCRThILCgZTV09SRDIQkk4SCwoGU1dPUkQzEJNOEgwKBlNUQUZGMRCh",
            "nAESDAoGU1RBRkYyEKKcARIMCgZTVEFGRjMQo5wBEgwKBkFSUk9XMRCx6gES",
            "DAoGQVJST1cyELLqARIMCgZBUlJPVzMQs+oBKpEBCgtQbGF5ZXJTdGF0ZRIK",
            "CgZQX0lETEUQABIMCghQX01PVklORxABEgoKBlBfSlVNUBACEgoKBlBfU1RV",
            "ThADEhEKDVBfQVRUQUNLU0tJTEwQBBIPCgtQX0JVRkZTS0lMTBAFEhEKDVBf",
            "REVCVUZGU0tJTEwQBhINCglQX0hBTkdJTkcQBxIKCgZQX0RFQUQQCCpNCgxN",
            "b25zdGVyU3RhdGUSCgoGTV9JRExFEAASDAoITV9NT1ZJTkcQARIKCgZNX1NU",
            "VU4QAhILCgdNX1NLSUxMEAMSCgoGTV9ERUFEEAQqgAEKB01hcE5hbWUSDAoI",
            "VHV0b3JpYWwQABILCgdWaWxsYWdlEAESCgoGRmllbGQxEAoSCgoGRmllbGQy",
            "EAsSCgoGRmllbGQzEAwSCgoGRmllbGQ0EA0SCgoGRmllbGQ1EA4SEAoMQm9z",
            "c1dhaXRSb29tEBUSDAoIQm9zc1Jvb20QFiomCg1Cb3NzRW50ZXJUeXBlEgoK",
            "BlNpbmdsZRAAEgkKBU11bHRpEAFCG6oCGEdvb2dsZS5Qcm90b2J1Zi5Qcm90",
            "b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Protobuf.Protocol.MsgId), typeof(global::Google.Protobuf.Protocol.GameObjectType), typeof(global::Google.Protobuf.Protocol.ClassType), typeof(global::Google.Protobuf.Protocol.PlayerSkillType), typeof(global::Google.Protobuf.Protocol.BossMonsterSkillType), typeof(global::Google.Protobuf.Protocol.ItemCategory), typeof(global::Google.Protobuf.Protocol.ItemType), typeof(global::Google.Protobuf.Protocol.PlayerState), typeof(global::Google.Protobuf.Protocol.MonsterState), typeof(global::Google.Protobuf.Protocol.MapName), typeof(global::Google.Protobuf.Protocol.BossEnterType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_Connected), global::Google.Protobuf.Protocol.S_Connected.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_ClassChoice), global::Google.Protobuf.Protocol.C_ClassChoice.Parser, new[]{ "ClassType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_EnterGame), global::Google.Protobuf.Protocol.S_EnterGame.Parser, new[]{ "MapId", "SpawnPointX", "SpawnPointY", "PlayerInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_PlayerSpawn), global::Google.Protobuf.Protocol.S_PlayerSpawn.Parser, new[]{ "PlayerInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_MonsterSpawn), global::Google.Protobuf.Protocol.S_MonsterSpawn.Parser, new[]{ "MonsterInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_PlayerMove), global::Google.Protobuf.Protocol.C_PlayerMove.Parser, new[]{ "State", "PositionX", "PositionY", "IsRight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_PlayerMove), global::Google.Protobuf.Protocol.S_PlayerMove.Parser, new[]{ "State", "PlayerId", "PositionX", "PositionY", "IsRight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_MonsterMove), global::Google.Protobuf.Protocol.S_MonsterMove.Parser, new[]{ "State", "MonsterId", "DestinationX", "DestinationY", "IsRight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_PlayerDie), global::Google.Protobuf.Protocol.C_PlayerDie.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_PlayerDie), global::Google.Protobuf.Protocol.S_PlayerDie.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_LeaveGame), global::Google.Protobuf.Protocol.S_LeaveGame.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_PlayerDespawn), global::Google.Protobuf.Protocol.S_PlayerDespawn.Parser, new[]{ "PlayerIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_MonsterDespawn), global::Google.Protobuf.Protocol.S_MonsterDespawn.Parser, new[]{ "MonsterIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_ItemSpawn), global::Google.Protobuf.Protocol.S_ItemSpawn.Parser, new[]{ "ItemInfo", "ItemCategory", "ItemType", "CanOnlyOwnerLootTime", "LifeTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_PlayerSkill), global::Google.Protobuf.Protocol.C_PlayerSkill.Parser, new[]{ "SkillType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_PlayerSkill), global::Google.Protobuf.Protocol.S_PlayerSkill.Parser, new[]{ "SkillType", "Skillid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_MonsterSkill), global::Google.Protobuf.Protocol.S_MonsterSkill.Parser, new[]{ "MonsterId", "SkillType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_HitMonster), global::Google.Protobuf.Protocol.C_HitMonster.Parser, new[]{ "MonsterId", "PlayerAttackPowers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_HitMonster), global::Google.Protobuf.Protocol.S_HitMonster.Parser, new[]{ "PlayerId", "MonsterId", "Damages", "MonsterMaxHp", "MonsterCurrentHp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_PlayerDamaged), global::Google.Protobuf.Protocol.C_PlayerDamaged.Parser, new[]{ "Damage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_PlayerDamaged), global::Google.Protobuf.Protocol.S_PlayerDamaged.Parser, new[]{ "PlayerId", "Damage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_ChangeMap), global::Google.Protobuf.Protocol.C_ChangeMap.Parser, new[]{ "MapId", "SpawnPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_BossRegister), global::Google.Protobuf.Protocol.C_BossRegister.Parser, new[]{ "BossEnterType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_BossRegisterDeny), global::Google.Protobuf.Protocol.S_BossRegisterDeny.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_BossWaiting), global::Google.Protobuf.Protocol.S_BossWaiting.Parser, new[]{ "WaitingCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_BossCancle), global::Google.Protobuf.Protocol.C_BossCancle.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_GameClear), global::Google.Protobuf.Protocol.S_GameClear.Parser, new[]{ "PlayerIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_GetExp), global::Google.Protobuf.Protocol.S_GetExp.Parser, new[]{ "PlayerIds", "Exp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.C_LootItem), global::Google.Protobuf.Protocol.C_LootItem.Parser, new[]{ "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_LootItem), global::Google.Protobuf.Protocol.S_LootItem.Parser, new[]{ "PlayerId", "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.S_ItemDespawn), global::Google.Protobuf.Protocol.S_ItemDespawn.Parser, new[]{ "ItemId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.PlayerInfo), global::Google.Protobuf.Protocol.PlayerInfo.Parser, new[]{ "PlayerId", "Name", "PositionX", "PositionY", "StatInfo", "CreatureState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.MonsterInfo), global::Google.Protobuf.Protocol.MonsterInfo.Parser, new[]{ "MonsterId", "Name", "DestinationX", "DestinationY", "StatInfo", "CreatureState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.PlayerStatInfo), global::Google.Protobuf.Protocol.PlayerStatInfo.Parser, new[]{ "Level", "ClassType", "Hp", "MaxHp", "Mp", "MaxMp", "AttackPower", "MagicPower", "Defense", "Speed", "Jump", "CurrentExp", "TotalExp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.MonsterStatInfo), global::Google.Protobuf.Protocol.MonsterStatInfo.Parser, new[]{ "Id", "Level", "Hp", "MaxHp", "AttackPower", "Defense", "Speed", "Exp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.ItemInfo), global::Google.Protobuf.Protocol.ItemInfo.Parser, new[]{ "ItemId", "OwnerId", "CanRootAnyOne", "PositionX", "PositionY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.Protocol.SkillInfo), global::Google.Protobuf.Protocol.SkillInfo.Parser, new[]{ "SkillId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MsgId {
    [pbr::OriginalName("S_CONNECTED")] SConnected = 0,
    [pbr::OriginalName("C_CLASS_CHOICE")] CClassChoice = 1,
    [pbr::OriginalName("S_ENTER_GAME")] SEnterGame = 2,
    [pbr::OriginalName("S_PLAYER_SPAWN")] SPlayerSpawn = 3,
    [pbr::OriginalName("S_MONSTER_SPAWN")] SMonsterSpawn = 4,
    [pbr::OriginalName("C_PLAYER_MOVE")] CPlayerMove = 5,
    [pbr::OriginalName("S_PLAYER_MOVE")] SPlayerMove = 6,
    [pbr::OriginalName("S_MONSTER_MOVE")] SMonsterMove = 7,
    [pbr::OriginalName("C_PLAYER_DIE")] CPlayerDie = 8,
    [pbr::OriginalName("S_LEAVE_GAME")] SLeaveGame = 9,
    [pbr::OriginalName("S_PLAYER_DESPAWN")] SPlayerDespawn = 10,
    [pbr::OriginalName("S_MONSTER_DESPAWN")] SMonsterDespawn = 11,
    [pbr::OriginalName("S_ITEM_SPAWN")] SItemSpawn = 12,
    [pbr::OriginalName("C_PLAYER_SKILL")] CPlayerSkill = 13,
    [pbr::OriginalName("S_PLAYER_SKILL")] SPlayerSkill = 14,
    [pbr::OriginalName("S_MONSTER_SKILL")] SMonsterSkill = 15,
    [pbr::OriginalName("C_HIT_MONSTER")] CHitMonster = 16,
    [pbr::OriginalName("S_HIT_MONSTER")] SHitMonster = 17,
    [pbr::OriginalName("C_PLAYER_DAMAGED")] CPlayerDamaged = 18,
    [pbr::OriginalName("S_PLAYER_DAMAGED")] SPlayerDamaged = 19,
    [pbr::OriginalName("C_CHANGE_MAP")] CChangeMap = 20,
    [pbr::OriginalName("C_BOSS_REGISTER")] CBossRegister = 21,
    [pbr::OriginalName("S_BOSS_REGISTER_DENY")] SBossRegisterDeny = 22,
    [pbr::OriginalName("S_BOSS_WAITING")] SBossWaiting = 23,
    [pbr::OriginalName("C_BOSS_CANCLE")] CBossCancle = 24,
    [pbr::OriginalName("S_GAME_CLEAR")] SGameClear = 25,
    [pbr::OriginalName("S_GET_EXP")] SGetExp = 26,
    [pbr::OriginalName("C_LOOT_ITEM")] CLootItem = 27,
    [pbr::OriginalName("S_LOOT_ITEM")] SLootItem = 28,
    [pbr::OriginalName("S_ITEM_DESPAWN")] SItemDespawn = 29,
  }

  public enum GameObjectType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("PLAYER")] Player = 1,
    [pbr::OriginalName("NORMALMONSTER")] Normalmonster = 2,
    [pbr::OriginalName("BOSSMONSTER")] Bossmonster = 3,
    /// <summary>
    /// 후순위
    /// </summary>
    [pbr::OriginalName("ITEM")] Item = 4,
    /// <summary>
    /// 후순위 
    /// </summary>
    [pbr::OriginalName("PROJECTILE")] Projectile = 5,
  }

  public enum ClassType {
    [pbr::OriginalName("CNONE")] Cnone = 0,
    [pbr::OriginalName("WARRIOR")] Warrior = 1,
    [pbr::OriginalName("MAGICIAN")] Magician = 2,
    [pbr::OriginalName("ARCHER")] Archer = 3,
  }

  /// <summary>
  /// 늘어나면 구분하면 됨
  /// </summary>
  public enum PlayerSkillType {
    [pbr::OriginalName("SKILL_WARRIOR")] SkillWarrior = 0,
    [pbr::OriginalName("SKILL_MAGE")] SkillMage = 1,
    [pbr::OriginalName("SKILL_ARCHER")] SkillArcher = 2,
  }

  /// <summary>
  /// 늘어나면 구분하면 됨
  /// </summary>
  public enum BossMonsterSkillType {
    [pbr::OriginalName("BOSSSKILL1")] Bossskill1 = 0,
    [pbr::OriginalName("BOSSSKILL2")] Bossskill2 = 1,
    [pbr::OriginalName("BOSSSKILL3")] Bossskill3 = 2,
    [pbr::OriginalName("BOSSSKILL4")] Bossskill4 = 3,
    [pbr::OriginalName("BOSSSKILL5")] Bossskill5 = 4,
  }

  /// <summary>
  /// 쓸거면 쓰세요
  /// </summary>
  public enum ItemCategory {
    [pbr::OriginalName("IC_GOLD")] IcGold = 0,
    [pbr::OriginalName("IC_ICONSUMABLE")] IcIconsumable = 1,
    [pbr::OriginalName("IC_IEQUIP")] IcIequip = 2,
  }

  /// <summary>
  /// 늘어나면 구분하면 됨
  /// </summary>
  public enum ItemType {
    /// <summary>
    /// GOLD LINE =====================================
    /// </summary>
    [pbr::OriginalName("GOLD")] Gold = 0,
    /// <summary>
    /// CONSUMABLE LINE =====================================
    /// </summary>
    [pbr::OriginalName("HPPOTION1")] Hppotion1 = 100,
    /// <summary>
    /// 하얀 포션 포지션
    /// </summary>
    [pbr::OriginalName("HPPOTION2")] Hppotion2 = 101,
    /// <summary>
    /// 파란 포션 포지션
    /// </summary>
    [pbr::OriginalName("MPPOTION1")] Mppotion1 = 201,
    /// <summary>
    /// 마나 엘릭서 포지션
    /// </summary>
    [pbr::OriginalName("MPPOTION2")] Mppotion2 = 202,
    /// <summary>
    /// 엘릭서 포지션
    /// </summary>
    [pbr::OriginalName("SUPERPOTION1")] Superpotion1 = 301,
    /// <summary>
    /// 파워 엘릭서 포지션
    /// </summary>
    [pbr::OriginalName("SUPERPOTION2")] Superpotion2 = 302,
    /// <summary>
    /// EQUIP LINE =====================================
    /// </summary>
    [pbr::OriginalName("HELMET1")] Helmet1 = 1001,
    /// <summary>
    /// 10렙 헬멧 
    /// </summary>
    [pbr::OriginalName("HELMET2")] Helmet2 = 1002,
    /// <summary>
    /// 5렙 갑옷
    /// </summary>
    [pbr::OriginalName("ARMOR1")] Armor1 = 2001,
    /// <summary>
    /// 10렙 갑옷
    /// </summary>
    [pbr::OriginalName("ARMOR2")] Armor2 = 2002,
    /// <summary>
    /// 5렙 부츠
    /// </summary>
    [pbr::OriginalName("BOOTS1")] Boots1 = 3001,
    /// <summary>
    /// 10렙 부츠
    /// </summary>
    [pbr::OriginalName("BOOTS2")] Boots2 = 3002,
    /// <summary>
    /// 1렙 칼
    /// </summary>
    [pbr::OriginalName("SWORD1")] Sword1 = 10001,
    /// <summary>
    /// 5렙 칼
    /// </summary>
    [pbr::OriginalName("SWORD2")] Sword2 = 10002,
    /// <summary>
    /// 10렙 칼
    /// </summary>
    [pbr::OriginalName("SWORD3")] Sword3 = 10003,
    /// <summary>
    /// 1렙 스테프
    /// </summary>
    [pbr::OriginalName("STAFF1")] Staff1 = 20001,
    /// <summary>
    /// 5렙 스테프
    /// </summary>
    [pbr::OriginalName("STAFF2")] Staff2 = 20002,
    /// <summary>
    /// 10렙 
    /// </summary>
    [pbr::OriginalName("STAFF3")] Staff3 = 20003,
    /// <summary>
    /// 1렙 활
    /// </summary>
    [pbr::OriginalName("ARROW1")] Arrow1 = 30001,
    /// <summary>
    /// 5렙 활
    /// </summary>
    [pbr::OriginalName("ARROW2")] Arrow2 = 30002,
    /// <summary>
    /// 10렙 활
    /// </summary>
    [pbr::OriginalName("ARROW3")] Arrow3 = 30003,
  }

  /// <summary>
  /// 플레이어와 작동방식 ex. FSM? 을 보고 한번 맞추긴 해야겠다.
  /// </summary>
  public enum PlayerState {
    [pbr::OriginalName("P_IDLE")] PIdle = 0,
    [pbr::OriginalName("P_MOVING")] PMoving = 1,
    [pbr::OriginalName("P_JUMP")] PJump = 2,
    [pbr::OriginalName("P_STUN")] PStun = 3,
    [pbr::OriginalName("P_ATTACKSKILL")] PAttackskill = 4,
    [pbr::OriginalName("P_BUFFSKILL")] PBuffskill = 5,
    [pbr::OriginalName("P_DEBUFFSKILL")] PDebuffskill = 6,
    [pbr::OriginalName("P_HANGING")] PHanging = 7,
    [pbr::OriginalName("P_DEAD")] PDead = 8,
  }

  /// <summary>
  /// 몬스터의 작동방식 ex. FSM? 을 보고 한번 맞추긴 해야겠다.
  /// </summary>
  public enum MonsterState {
    [pbr::OriginalName("M_IDLE")] MIdle = 0,
    [pbr::OriginalName("M_MOVING")] MMoving = 1,
    [pbr::OriginalName("M_STUN")] MStun = 2,
    [pbr::OriginalName("M_SKILL")] MSkill = 3,
    [pbr::OriginalName("M_DEAD")] MDead = 4,
  }

  public enum MapName {
    [pbr::OriginalName("Tutorial")] Tutorial = 0,
    /// <summary>
    /// 마을
    /// </summary>
    [pbr::OriginalName("Village")] Village = 1,
    /// <summary>
    /// 사냥터
    /// </summary>
    [pbr::OriginalName("Field1")] Field1 = 10,
    [pbr::OriginalName("Field2")] Field2 = 11,
    [pbr::OriginalName("Field3")] Field3 = 12,
    [pbr::OriginalName("Field4")] Field4 = 13,
    [pbr::OriginalName("Field5")] Field5 = 14,
    [pbr::OriginalName("BossWaitRoom")] BossWaitRoom = 21,
    [pbr::OriginalName("BossRoom")] BossRoom = 22,
  }

  public enum BossEnterType {
    [pbr::OriginalName("Single")] Single = 0,
    [pbr::OriginalName("Multi")] Multi = 1,
  }

  #endregion

  #region Messages
  public sealed partial class S_Connected : pb::IMessage<S_Connected> {
    private static readonly pb::MessageParser<S_Connected> _parser = new pb::MessageParser<S_Connected>(() => new S_Connected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_Connected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_Connected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_Connected(S_Connected other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_Connected Clone() {
      return new S_Connected(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_Connected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_Connected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_Connected other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class C_ClassChoice : pb::IMessage<C_ClassChoice> {
    private static readonly pb::MessageParser<C_ClassChoice> _parser = new pb::MessageParser<C_ClassChoice>(() => new C_ClassChoice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_ClassChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_ClassChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_ClassChoice(C_ClassChoice other) : this() {
      classType_ = other.classType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_ClassChoice Clone() {
      return new C_ClassChoice(this);
    }

    /// <summary>Field number for the "classType" field.</summary>
    public const int ClassTypeFieldNumber = 1;
    private global::Google.Protobuf.Protocol.ClassType classType_ = global::Google.Protobuf.Protocol.ClassType.Cnone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.ClassType ClassType {
      get { return classType_; }
      set {
        classType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_ClassChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_ClassChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassType != other.ClassType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) hash ^= ClassType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ClassType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClassType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_ClassChoice other) {
      if (other == null) {
        return;
      }
      if (other.ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) {
        ClassType = other.ClassType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClassType = (global::Google.Protobuf.Protocol.ClassType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_EnterGame : pb::IMessage<S_EnterGame> {
    private static readonly pb::MessageParser<S_EnterGame> _parser = new pb::MessageParser<S_EnterGame>(() => new S_EnterGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_EnterGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_EnterGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_EnterGame(S_EnterGame other) : this() {
      mapId_ = other.mapId_;
      spawnPointX_ = other.spawnPointX_;
      spawnPointY_ = other.spawnPointY_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_EnterGame Clone() {
      return new S_EnterGame(this);
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "spawnPointX" field.</summary>
    public const int SpawnPointXFieldNumber = 2;
    private float spawnPointX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpawnPointX {
      get { return spawnPointX_; }
      set {
        spawnPointX_ = value;
      }
    }

    /// <summary>Field number for the "spawnPointY" field.</summary>
    public const int SpawnPointYFieldNumber = 3;
    private float spawnPointY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpawnPointY {
      get { return spawnPointY_; }
      set {
        spawnPointY_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 4;
    private global::Google.Protobuf.Protocol.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_EnterGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_EnterGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapId != other.MapId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpawnPointX, other.SpawnPointX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpawnPointY, other.SpawnPointY)) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (SpawnPointX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpawnPointX);
      if (SpawnPointY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpawnPointY);
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapId);
      }
      if (SpawnPointX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SpawnPointX);
      }
      if (SpawnPointY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SpawnPointY);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (SpawnPointX != 0F) {
        size += 1 + 4;
      }
      if (SpawnPointY != 0F) {
        size += 1 + 4;
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_EnterGame other) {
      if (other == null) {
        return;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      if (other.SpawnPointX != 0F) {
        SpawnPointX = other.SpawnPointX;
      }
      if (other.SpawnPointY != 0F) {
        SpawnPointY = other.SpawnPointY;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::Google.Protobuf.Protocol.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapId = input.ReadInt32();
            break;
          }
          case 21: {
            SpawnPointX = input.ReadFloat();
            break;
          }
          case 29: {
            SpawnPointY = input.ReadFloat();
            break;
          }
          case 34: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::Google.Protobuf.Protocol.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_PlayerSpawn : pb::IMessage<S_PlayerSpawn> {
    private static readonly pb::MessageParser<S_PlayerSpawn> _parser = new pb::MessageParser<S_PlayerSpawn>(() => new S_PlayerSpawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_PlayerSpawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerSpawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerSpawn(S_PlayerSpawn other) : this() {
      playerInfos_ = other.playerInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerSpawn Clone() {
      return new S_PlayerSpawn(this);
    }

    /// <summary>Field number for the "playerInfos" field.</summary>
    public const int PlayerInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.Protocol.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.Protocol.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.Protocol.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::Google.Protobuf.Protocol.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.Protocol.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_PlayerSpawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_PlayerSpawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_PlayerSpawn other) {
      if (other == null) {
        return;
      }
      playerInfos_.Add(other.playerInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_MonsterSpawn : pb::IMessage<S_MonsterSpawn> {
    private static readonly pb::MessageParser<S_MonsterSpawn> _parser = new pb::MessageParser<S_MonsterSpawn>(() => new S_MonsterSpawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_MonsterSpawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterSpawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterSpawn(S_MonsterSpawn other) : this() {
      monsterInfos_ = other.monsterInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterSpawn Clone() {
      return new S_MonsterSpawn(this);
    }

    /// <summary>Field number for the "monsterInfos" field.</summary>
    public const int MonsterInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.Protocol.MonsterInfo> _repeated_monsterInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.Protocol.MonsterInfo.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.Protocol.MonsterInfo> monsterInfos_ = new pbc::RepeatedField<global::Google.Protobuf.Protocol.MonsterInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.Protocol.MonsterInfo> MonsterInfos {
      get { return monsterInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_MonsterSpawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_MonsterSpawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monsterInfos_.Equals(other.monsterInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monsterInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monsterInfos_.WriteTo(output, _repeated_monsterInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monsterInfos_.CalculateSize(_repeated_monsterInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_MonsterSpawn other) {
      if (other == null) {
        return;
      }
      monsterInfos_.Add(other.monsterInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monsterInfos_.AddEntriesFrom(input, _repeated_monsterInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_PlayerMove : pb::IMessage<C_PlayerMove> {
    private static readonly pb::MessageParser<C_PlayerMove> _parser = new pb::MessageParser<C_PlayerMove>(() => new C_PlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_PlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerMove(C_PlayerMove other) : this() {
      state_ = other.state_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      isRight_ = other.isRight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerMove Clone() {
      return new C_PlayerMove(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Google.Protobuf.Protocol.PlayerState state_ = global::Google.Protobuf.Protocol.PlayerState.PIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "positionX" field.</summary>
    public const int PositionXFieldNumber = 2;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "positionY" field.</summary>
    public const int PositionYFieldNumber = 3;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "isRight" field.</summary>
    public const int IsRightFieldNumber = 4;
    private bool isRight_;
    /// <summary>
    ///바라보는 방향 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRight {
      get { return isRight_; }
      set {
        isRight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_PlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_PlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (IsRight != other.IsRight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::Google.Protobuf.Protocol.PlayerState.PIdle) hash ^= State.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (IsRight != false) hash ^= IsRight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (IsRight != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (IsRight != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_PlayerMove other) {
      if (other == null) {
        return;
      }
      if (other.State != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        State = other.State;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.IsRight != false) {
        IsRight = other.IsRight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Google.Protobuf.Protocol.PlayerState) input.ReadEnum();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 32: {
            IsRight = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_PlayerMove : pb::IMessage<S_PlayerMove> {
    private static readonly pb::MessageParser<S_PlayerMove> _parser = new pb::MessageParser<S_PlayerMove>(() => new S_PlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_PlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerMove(S_PlayerMove other) : this() {
      state_ = other.state_;
      playerId_ = other.playerId_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      isRight_ = other.isRight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerMove Clone() {
      return new S_PlayerMove(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Google.Protobuf.Protocol.PlayerState state_ = global::Google.Protobuf.Protocol.PlayerState.PIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "positionX" field.</summary>
    public const int PositionXFieldNumber = 3;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "positionY" field.</summary>
    public const int PositionYFieldNumber = 4;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "isRight" field.</summary>
    public const int IsRightFieldNumber = 5;
    private bool isRight_;
    /// <summary>
    ///바라보는 방향 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRight {
      get { return isRight_; }
      set {
        isRight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_PlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_PlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (IsRight != other.IsRight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::Google.Protobuf.Protocol.PlayerState.PIdle) hash ^= State.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (IsRight != false) hash ^= IsRight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionY);
      }
      if (IsRight != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (IsRight != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_PlayerMove other) {
      if (other == null) {
        return;
      }
      if (other.State != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        State = other.State;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.IsRight != false) {
        IsRight = other.IsRight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Google.Protobuf.Protocol.PlayerState) input.ReadEnum();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 29: {
            PositionX = input.ReadFloat();
            break;
          }
          case 37: {
            PositionY = input.ReadFloat();
            break;
          }
          case 40: {
            IsRight = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_MonsterMove : pb::IMessage<S_MonsterMove> {
    private static readonly pb::MessageParser<S_MonsterMove> _parser = new pb::MessageParser<S_MonsterMove>(() => new S_MonsterMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_MonsterMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterMove(S_MonsterMove other) : this() {
      state_ = other.state_;
      monsterId_ = other.monsterId_;
      destinationX_ = other.destinationX_;
      destinationY_ = other.destinationY_;
      isRight_ = other.isRight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterMove Clone() {
      return new S_MonsterMove(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Google.Protobuf.Protocol.MonsterState state_ = global::Google.Protobuf.Protocol.MonsterState.MIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.MonsterState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "destinationX" field.</summary>
    public const int DestinationXFieldNumber = 3;
    private float destinationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestinationX {
      get { return destinationX_; }
      set {
        destinationX_ = value;
      }
    }

    /// <summary>Field number for the "destinationY" field.</summary>
    public const int DestinationYFieldNumber = 4;
    private float destinationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestinationY {
      get { return destinationY_; }
      set {
        destinationY_ = value;
      }
    }

    /// <summary>Field number for the "isRight" field.</summary>
    public const int IsRightFieldNumber = 5;
    private bool isRight_;
    /// <summary>
    ///바라보는 방향 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRight {
      get { return isRight_; }
      set {
        isRight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_MonsterMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_MonsterMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (MonsterId != other.MonsterId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestinationX, other.DestinationX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestinationY, other.DestinationY)) return false;
      if (IsRight != other.IsRight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::Google.Protobuf.Protocol.MonsterState.MIdle) hash ^= State.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (DestinationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestinationX);
      if (DestinationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestinationY);
      if (IsRight != false) hash ^= IsRight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != global::Google.Protobuf.Protocol.MonsterState.MIdle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
      if (DestinationX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DestinationX);
      }
      if (DestinationY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DestinationY);
      }
      if (IsRight != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != global::Google.Protobuf.Protocol.MonsterState.MIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (DestinationX != 0F) {
        size += 1 + 4;
      }
      if (DestinationY != 0F) {
        size += 1 + 4;
      }
      if (IsRight != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_MonsterMove other) {
      if (other == null) {
        return;
      }
      if (other.State != global::Google.Protobuf.Protocol.MonsterState.MIdle) {
        State = other.State;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.DestinationX != 0F) {
        DestinationX = other.DestinationX;
      }
      if (other.DestinationY != 0F) {
        DestinationY = other.DestinationY;
      }
      if (other.IsRight != false) {
        IsRight = other.IsRight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Google.Protobuf.Protocol.MonsterState) input.ReadEnum();
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 29: {
            DestinationX = input.ReadFloat();
            break;
          }
          case 37: {
            DestinationY = input.ReadFloat();
            break;
          }
          case 40: {
            IsRight = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_PlayerDie : pb::IMessage<C_PlayerDie> {
    private static readonly pb::MessageParser<C_PlayerDie> _parser = new pb::MessageParser<C_PlayerDie>(() => new C_PlayerDie());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_PlayerDie> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerDie() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerDie(C_PlayerDie other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerDie Clone() {
      return new C_PlayerDie(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_PlayerDie);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_PlayerDie other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_PlayerDie other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class S_PlayerDie : pb::IMessage<S_PlayerDie> {
    private static readonly pb::MessageParser<S_PlayerDie> _parser = new pb::MessageParser<S_PlayerDie>(() => new S_PlayerDie());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_PlayerDie> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDie() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDie(S_PlayerDie other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDie Clone() {
      return new S_PlayerDie(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_PlayerDie);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_PlayerDie other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_PlayerDie other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_LeaveGame : pb::IMessage<S_LeaveGame> {
    private static readonly pb::MessageParser<S_LeaveGame> _parser = new pb::MessageParser<S_LeaveGame>(() => new S_LeaveGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_LeaveGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_LeaveGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_LeaveGame(S_LeaveGame other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_LeaveGame Clone() {
      return new S_LeaveGame(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_LeaveGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_LeaveGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_LeaveGame other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class S_PlayerDespawn : pb::IMessage<S_PlayerDespawn> {
    private static readonly pb::MessageParser<S_PlayerDespawn> _parser = new pb::MessageParser<S_PlayerDespawn>(() => new S_PlayerDespawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_PlayerDespawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDespawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDespawn(S_PlayerDespawn other) : this() {
      playerIds_ = other.playerIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDespawn Clone() {
      return new S_PlayerDespawn(this);
    }

    /// <summary>Field number for the "playerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_PlayerDespawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_PlayerDespawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerIds_.Equals(other.playerIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_PlayerDespawn other) {
      if (other == null) {
        return;
      }
      playerIds_.Add(other.playerIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_MonsterDespawn : pb::IMessage<S_MonsterDespawn> {
    private static readonly pb::MessageParser<S_MonsterDespawn> _parser = new pb::MessageParser<S_MonsterDespawn>(() => new S_MonsterDespawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_MonsterDespawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterDespawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterDespawn(S_MonsterDespawn other) : this() {
      monsterIds_ = other.monsterIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterDespawn Clone() {
      return new S_MonsterDespawn(this);
    }

    /// <summary>Field number for the "monsterIds" field.</summary>
    public const int MonsterIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_monsterIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> monsterIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MonsterIds {
      get { return monsterIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_MonsterDespawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_MonsterDespawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monsterIds_.Equals(other.monsterIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monsterIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monsterIds_.WriteTo(output, _repeated_monsterIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monsterIds_.CalculateSize(_repeated_monsterIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_MonsterDespawn other) {
      if (other == null) {
        return;
      }
      monsterIds_.Add(other.monsterIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            monsterIds_.AddEntriesFrom(input, _repeated_monsterIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_ItemSpawn : pb::IMessage<S_ItemSpawn> {
    private static readonly pb::MessageParser<S_ItemSpawn> _parser = new pb::MessageParser<S_ItemSpawn>(() => new S_ItemSpawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_ItemSpawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_ItemSpawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_ItemSpawn(S_ItemSpawn other) : this() {
      itemInfo_ = other.itemInfo_ != null ? other.itemInfo_.Clone() : null;
      itemCategory_ = other.itemCategory_;
      itemType_ = other.itemType_;
      canOnlyOwnerLootTime_ = other.canOnlyOwnerLootTime_;
      lifeTime_ = other.lifeTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_ItemSpawn Clone() {
      return new S_ItemSpawn(this);
    }

    /// <summary>Field number for the "itemInfo" field.</summary>
    public const int ItemInfoFieldNumber = 1;
    private global::Google.Protobuf.Protocol.ItemInfo itemInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.ItemInfo ItemInfo {
      get { return itemInfo_; }
      set {
        itemInfo_ = value;
      }
    }

    /// <summary>Field number for the "itemCategory" field.</summary>
    public const int ItemCategoryFieldNumber = 2;
    private global::Google.Protobuf.Protocol.ItemCategory itemCategory_ = global::Google.Protobuf.Protocol.ItemCategory.IcGold;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.ItemCategory ItemCategory {
      get { return itemCategory_; }
      set {
        itemCategory_ = value;
      }
    }

    /// <summary>Field number for the "itemType" field.</summary>
    public const int ItemTypeFieldNumber = 3;
    private global::Google.Protobuf.Protocol.ItemType itemType_ = global::Google.Protobuf.Protocol.ItemType.Gold;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "canOnlyOwnerLootTime" field.</summary>
    public const int CanOnlyOwnerLootTimeFieldNumber = 4;
    private int canOnlyOwnerLootTime_;
    /// <summary>
    /// 10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanOnlyOwnerLootTime {
      get { return canOnlyOwnerLootTime_; }
      set {
        canOnlyOwnerLootTime_ = value;
      }
    }

    /// <summary>Field number for the "lifeTime" field.</summary>
    public const int LifeTimeFieldNumber = 5;
    private int lifeTime_;
    /// <summary>
    /// 60
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LifeTime {
      get { return lifeTime_; }
      set {
        lifeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_ItemSpawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_ItemSpawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ItemInfo, other.ItemInfo)) return false;
      if (ItemCategory != other.ItemCategory) return false;
      if (ItemType != other.ItemType) return false;
      if (CanOnlyOwnerLootTime != other.CanOnlyOwnerLootTime) return false;
      if (LifeTime != other.LifeTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemInfo_ != null) hash ^= ItemInfo.GetHashCode();
      if (ItemCategory != global::Google.Protobuf.Protocol.ItemCategory.IcGold) hash ^= ItemCategory.GetHashCode();
      if (ItemType != global::Google.Protobuf.Protocol.ItemType.Gold) hash ^= ItemType.GetHashCode();
      if (CanOnlyOwnerLootTime != 0) hash ^= CanOnlyOwnerLootTime.GetHashCode();
      if (LifeTime != 0) hash ^= LifeTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ItemInfo);
      }
      if (ItemCategory != global::Google.Protobuf.Protocol.ItemCategory.IcGold) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ItemCategory);
      }
      if (ItemType != global::Google.Protobuf.Protocol.ItemType.Gold) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ItemType);
      }
      if (CanOnlyOwnerLootTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CanOnlyOwnerLootTime);
      }
      if (LifeTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LifeTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemInfo);
      }
      if (ItemCategory != global::Google.Protobuf.Protocol.ItemCategory.IcGold) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemCategory);
      }
      if (ItemType != global::Google.Protobuf.Protocol.ItemType.Gold) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (CanOnlyOwnerLootTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanOnlyOwnerLootTime);
      }
      if (LifeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LifeTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_ItemSpawn other) {
      if (other == null) {
        return;
      }
      if (other.itemInfo_ != null) {
        if (itemInfo_ == null) {
          ItemInfo = new global::Google.Protobuf.Protocol.ItemInfo();
        }
        ItemInfo.MergeFrom(other.ItemInfo);
      }
      if (other.ItemCategory != global::Google.Protobuf.Protocol.ItemCategory.IcGold) {
        ItemCategory = other.ItemCategory;
      }
      if (other.ItemType != global::Google.Protobuf.Protocol.ItemType.Gold) {
        ItemType = other.ItemType;
      }
      if (other.CanOnlyOwnerLootTime != 0) {
        CanOnlyOwnerLootTime = other.CanOnlyOwnerLootTime;
      }
      if (other.LifeTime != 0) {
        LifeTime = other.LifeTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (itemInfo_ == null) {
              ItemInfo = new global::Google.Protobuf.Protocol.ItemInfo();
            }
            input.ReadMessage(ItemInfo);
            break;
          }
          case 16: {
            ItemCategory = (global::Google.Protobuf.Protocol.ItemCategory) input.ReadEnum();
            break;
          }
          case 24: {
            ItemType = (global::Google.Protobuf.Protocol.ItemType) input.ReadEnum();
            break;
          }
          case 32: {
            CanOnlyOwnerLootTime = input.ReadInt32();
            break;
          }
          case 40: {
            LifeTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_PlayerSkill : pb::IMessage<C_PlayerSkill> {
    private static readonly pb::MessageParser<C_PlayerSkill> _parser = new pb::MessageParser<C_PlayerSkill>(() => new C_PlayerSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_PlayerSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerSkill(C_PlayerSkill other) : this() {
      skillType_ = other.skillType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerSkill Clone() {
      return new C_PlayerSkill(this);
    }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 1;
    private global::Google.Protobuf.Protocol.PlayerSkillType skillType_ = global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.PlayerSkillType SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_PlayerSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_PlayerSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillType != other.SkillType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) hash ^= SkillType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SkillType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SkillType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_PlayerSkill other) {
      if (other == null) {
        return;
      }
      if (other.SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) {
        SkillType = other.SkillType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillType = (global::Google.Protobuf.Protocol.PlayerSkillType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_PlayerSkill : pb::IMessage<S_PlayerSkill> {
    private static readonly pb::MessageParser<S_PlayerSkill> _parser = new pb::MessageParser<S_PlayerSkill>(() => new S_PlayerSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_PlayerSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerSkill(S_PlayerSkill other) : this() {
      skillType_ = other.skillType_;
      skillid_ = other.skillid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerSkill Clone() {
      return new S_PlayerSkill(this);
    }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 1;
    private global::Google.Protobuf.Protocol.PlayerSkillType skillType_ = global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.PlayerSkillType SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_PlayerSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_PlayerSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillType != other.SkillType) return false;
      if (Skillid != other.Skillid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) hash ^= SkillType.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SkillType);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Skillid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SkillType);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_PlayerSkill other) {
      if (other == null) {
        return;
      }
      if (other.SkillType != global::Google.Protobuf.Protocol.PlayerSkillType.SkillWarrior) {
        SkillType = other.SkillType;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillType = (global::Google.Protobuf.Protocol.PlayerSkillType) input.ReadEnum();
            break;
          }
          case 16: {
            Skillid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_MonsterSkill : pb::IMessage<S_MonsterSkill> {
    private static readonly pb::MessageParser<S_MonsterSkill> _parser = new pb::MessageParser<S_MonsterSkill>(() => new S_MonsterSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_MonsterSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterSkill(S_MonsterSkill other) : this() {
      monsterId_ = other.monsterId_;
      skillType_ = other.skillType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_MonsterSkill Clone() {
      return new S_MonsterSkill(this);
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 1;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "skillType" field.</summary>
    public const int SkillTypeFieldNumber = 2;
    private global::Google.Protobuf.Protocol.BossMonsterSkillType skillType_ = global::Google.Protobuf.Protocol.BossMonsterSkillType.Bossskill1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.BossMonsterSkillType SkillType {
      get { return skillType_; }
      set {
        skillType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_MonsterSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_MonsterSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterId != other.MonsterId) return false;
      if (SkillType != other.SkillType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (SkillType != global::Google.Protobuf.Protocol.BossMonsterSkillType.Bossskill1) hash ^= SkillType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterId);
      }
      if (SkillType != global::Google.Protobuf.Protocol.BossMonsterSkillType.Bossskill1) {
        output.WriteRawTag(16);
        output.WriteEnum((int) SkillType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (SkillType != global::Google.Protobuf.Protocol.BossMonsterSkillType.Bossskill1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SkillType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_MonsterSkill other) {
      if (other == null) {
        return;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.SkillType != global::Google.Protobuf.Protocol.BossMonsterSkillType.Bossskill1) {
        SkillType = other.SkillType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillType = (global::Google.Protobuf.Protocol.BossMonsterSkillType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_HitMonster : pb::IMessage<C_HitMonster> {
    private static readonly pb::MessageParser<C_HitMonster> _parser = new pb::MessageParser<C_HitMonster>(() => new C_HitMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_HitMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_HitMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_HitMonster(C_HitMonster other) : this() {
      monsterId_ = other.monsterId_;
      playerAttackPowers_ = other.playerAttackPowers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_HitMonster Clone() {
      return new C_HitMonster(this);
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 1;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "playerAttackPowers" field.</summary>
    public const int PlayerAttackPowersFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_playerAttackPowers_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> playerAttackPowers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerAttackPowers {
      get { return playerAttackPowers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_HitMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_HitMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterId != other.MonsterId) return false;
      if(!playerAttackPowers_.Equals(other.playerAttackPowers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      hash ^= playerAttackPowers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterId);
      }
      playerAttackPowers_.WriteTo(output, _repeated_playerAttackPowers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      size += playerAttackPowers_.CalculateSize(_repeated_playerAttackPowers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_HitMonster other) {
      if (other == null) {
        return;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      playerAttackPowers_.Add(other.playerAttackPowers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            playerAttackPowers_.AddEntriesFrom(input, _repeated_playerAttackPowers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_HitMonster : pb::IMessage<S_HitMonster> {
    private static readonly pb::MessageParser<S_HitMonster> _parser = new pb::MessageParser<S_HitMonster>(() => new S_HitMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_HitMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_HitMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_HitMonster(S_HitMonster other) : this() {
      playerId_ = other.playerId_;
      monsterId_ = other.monsterId_;
      damages_ = other.damages_.Clone();
      monsterMaxHp_ = other.monsterMaxHp_;
      monsterCurrentHp_ = other.monsterCurrentHp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_HitMonster Clone() {
      return new S_HitMonster(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "damages" field.</summary>
    public const int DamagesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_damages_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> damages_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Damages {
      get { return damages_; }
    }

    /// <summary>Field number for the "monsterMaxHp" field.</summary>
    public const int MonsterMaxHpFieldNumber = 4;
    private int monsterMaxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterMaxHp {
      get { return monsterMaxHp_; }
      set {
        monsterMaxHp_ = value;
      }
    }

    /// <summary>Field number for the "monsterCurrentHp" field.</summary>
    public const int MonsterCurrentHpFieldNumber = 5;
    private int monsterCurrentHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterCurrentHp {
      get { return monsterCurrentHp_; }
      set {
        monsterCurrentHp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_HitMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_HitMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (MonsterId != other.MonsterId) return false;
      if(!damages_.Equals(other.damages_)) return false;
      if (MonsterMaxHp != other.MonsterMaxHp) return false;
      if (MonsterCurrentHp != other.MonsterCurrentHp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      hash ^= damages_.GetHashCode();
      if (MonsterMaxHp != 0) hash ^= MonsterMaxHp.GetHashCode();
      if (MonsterCurrentHp != 0) hash ^= MonsterCurrentHp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
      damages_.WriteTo(output, _repeated_damages_codec);
      if (MonsterMaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MonsterMaxHp);
      }
      if (MonsterCurrentHp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MonsterCurrentHp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      size += damages_.CalculateSize(_repeated_damages_codec);
      if (MonsterMaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterMaxHp);
      }
      if (MonsterCurrentHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterCurrentHp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_HitMonster other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      damages_.Add(other.damages_);
      if (other.MonsterMaxHp != 0) {
        MonsterMaxHp = other.MonsterMaxHp;
      }
      if (other.MonsterCurrentHp != 0) {
        MonsterCurrentHp = other.MonsterCurrentHp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            damages_.AddEntriesFrom(input, _repeated_damages_codec);
            break;
          }
          case 32: {
            MonsterMaxHp = input.ReadInt32();
            break;
          }
          case 40: {
            MonsterCurrentHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_PlayerDamaged : pb::IMessage<C_PlayerDamaged> {
    private static readonly pb::MessageParser<C_PlayerDamaged> _parser = new pb::MessageParser<C_PlayerDamaged>(() => new C_PlayerDamaged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_PlayerDamaged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerDamaged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerDamaged(C_PlayerDamaged other) : this() {
      damage_ = other.damage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_PlayerDamaged Clone() {
      return new C_PlayerDamaged(this);
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 1;
    private int damage_;
    /// <summary>
    /// 클라이언트에서 계산을 마친 받은 데미지
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_PlayerDamaged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_PlayerDamaged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Damage != other.Damage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Damage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_PlayerDamaged other) {
      if (other == null) {
        return;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_PlayerDamaged : pb::IMessage<S_PlayerDamaged> {
    private static readonly pb::MessageParser<S_PlayerDamaged> _parser = new pb::MessageParser<S_PlayerDamaged>(() => new S_PlayerDamaged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_PlayerDamaged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDamaged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDamaged(S_PlayerDamaged other) : this() {
      playerId_ = other.playerId_;
      damage_ = other.damage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_PlayerDamaged Clone() {
      return new S_PlayerDamaged(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private int damage_;
    /// <summary>
    /// 클라이언트에서 계산을 마친 받은 데미지
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_PlayerDamaged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_PlayerDamaged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Damage != other.Damage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Damage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Damage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_PlayerDamaged other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_ChangeMap : pb::IMessage<C_ChangeMap> {
    private static readonly pb::MessageParser<C_ChangeMap> _parser = new pb::MessageParser<C_ChangeMap>(() => new C_ChangeMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_ChangeMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_ChangeMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_ChangeMap(C_ChangeMap other) : this() {
      mapId_ = other.mapId_;
      spawnPoint_ = other.spawnPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_ChangeMap Clone() {
      return new C_ChangeMap(this);
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "spawnPoint" field.</summary>
    public const int SpawnPointFieldNumber = 2;
    private int spawnPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnPoint {
      get { return spawnPoint_; }
      set {
        spawnPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_ChangeMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_ChangeMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapId != other.MapId) return false;
      if (SpawnPoint != other.SpawnPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (SpawnPoint != 0) hash ^= SpawnPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapId);
      }
      if (SpawnPoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpawnPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (SpawnPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_ChangeMap other) {
      if (other == null) {
        return;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      if (other.SpawnPoint != 0) {
        SpawnPoint = other.SpawnPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapId = input.ReadInt32();
            break;
          }
          case 16: {
            SpawnPoint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_BossRegister : pb::IMessage<C_BossRegister> {
    private static readonly pb::MessageParser<C_BossRegister> _parser = new pb::MessageParser<C_BossRegister>(() => new C_BossRegister());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_BossRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_BossRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_BossRegister(C_BossRegister other) : this() {
      bossEnterType_ = other.bossEnterType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_BossRegister Clone() {
      return new C_BossRegister(this);
    }

    /// <summary>Field number for the "bossEnterType" field.</summary>
    public const int BossEnterTypeFieldNumber = 1;
    private global::Google.Protobuf.Protocol.BossEnterType bossEnterType_ = global::Google.Protobuf.Protocol.BossEnterType.Single;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.BossEnterType BossEnterType {
      get { return bossEnterType_; }
      set {
        bossEnterType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_BossRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_BossRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BossEnterType != other.BossEnterType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BossEnterType != global::Google.Protobuf.Protocol.BossEnterType.Single) hash ^= BossEnterType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BossEnterType != global::Google.Protobuf.Protocol.BossEnterType.Single) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BossEnterType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BossEnterType != global::Google.Protobuf.Protocol.BossEnterType.Single) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BossEnterType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_BossRegister other) {
      if (other == null) {
        return;
      }
      if (other.BossEnterType != global::Google.Protobuf.Protocol.BossEnterType.Single) {
        BossEnterType = other.BossEnterType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BossEnterType = (global::Google.Protobuf.Protocol.BossEnterType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_BossRegisterDeny : pb::IMessage<S_BossRegisterDeny> {
    private static readonly pb::MessageParser<S_BossRegisterDeny> _parser = new pb::MessageParser<S_BossRegisterDeny>(() => new S_BossRegisterDeny());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_BossRegisterDeny> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_BossRegisterDeny() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_BossRegisterDeny(S_BossRegisterDeny other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_BossRegisterDeny Clone() {
      return new S_BossRegisterDeny(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_BossRegisterDeny);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_BossRegisterDeny other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_BossRegisterDeny other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class S_BossWaiting : pb::IMessage<S_BossWaiting> {
    private static readonly pb::MessageParser<S_BossWaiting> _parser = new pb::MessageParser<S_BossWaiting>(() => new S_BossWaiting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_BossWaiting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_BossWaiting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_BossWaiting(S_BossWaiting other) : this() {
      waitingCount_ = other.waitingCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_BossWaiting Clone() {
      return new S_BossWaiting(this);
    }

    /// <summary>Field number for the "waitingCount" field.</summary>
    public const int WaitingCountFieldNumber = 1;
    private int waitingCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitingCount {
      get { return waitingCount_; }
      set {
        waitingCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_BossWaiting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_BossWaiting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WaitingCount != other.WaitingCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WaitingCount != 0) hash ^= WaitingCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaitingCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaitingCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaitingCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitingCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_BossWaiting other) {
      if (other == null) {
        return;
      }
      if (other.WaitingCount != 0) {
        WaitingCount = other.WaitingCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WaitingCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_BossCancle : pb::IMessage<C_BossCancle> {
    private static readonly pb::MessageParser<C_BossCancle> _parser = new pb::MessageParser<C_BossCancle>(() => new C_BossCancle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_BossCancle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_BossCancle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_BossCancle(C_BossCancle other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_BossCancle Clone() {
      return new C_BossCancle(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_BossCancle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_BossCancle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_BossCancle other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class S_GameClear : pb::IMessage<S_GameClear> {
    private static readonly pb::MessageParser<S_GameClear> _parser = new pb::MessageParser<S_GameClear>(() => new S_GameClear());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_GameClear> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_GameClear() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_GameClear(S_GameClear other) : this() {
      playerIds_ = other.playerIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_GameClear Clone() {
      return new S_GameClear(this);
    }

    /// <summary>Field number for the "playerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_playerIds_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> playerIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerIds {
      get { return playerIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_GameClear);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_GameClear other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerIds_.Equals(other.playerIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerIds_.WriteTo(output, _repeated_playerIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerIds_.CalculateSize(_repeated_playerIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_GameClear other) {
      if (other == null) {
        return;
      }
      playerIds_.Add(other.playerIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            playerIds_.AddEntriesFrom(input, _repeated_playerIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_GetExp : pb::IMessage<S_GetExp> {
    private static readonly pb::MessageParser<S_GetExp> _parser = new pb::MessageParser<S_GetExp>(() => new S_GetExp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_GetExp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_GetExp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_GetExp(S_GetExp other) : this() {
      playerIds_ = other.playerIds_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_GetExp Clone() {
      return new S_GetExp(this);
    }

    /// <summary>Field number for the "playerIds" field.</summary>
    public const int PlayerIdsFieldNumber = 1;
    private int playerIds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIds {
      get { return playerIds_; }
      set {
        playerIds_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_GetExp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_GetExp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIds != other.PlayerIds) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIds != 0) hash ^= PlayerIds.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerIds);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIds);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_GetExp other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIds != 0) {
        PlayerIds = other.PlayerIds;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerIds = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C_LootItem : pb::IMessage<C_LootItem> {
    private static readonly pb::MessageParser<C_LootItem> _parser = new pb::MessageParser<C_LootItem>(() => new C_LootItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C_LootItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_LootItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_LootItem(C_LootItem other) : this() {
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C_LootItem Clone() {
      return new C_LootItem(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C_LootItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C_LootItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C_LootItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_LootItem : pb::IMessage<S_LootItem> {
    private static readonly pb::MessageParser<S_LootItem> _parser = new pb::MessageParser<S_LootItem>(() => new S_LootItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_LootItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_LootItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_LootItem(S_LootItem other) : this() {
      playerId_ = other.playerId_;
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_LootItem Clone() {
      return new S_LootItem(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_LootItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_LootItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_LootItem other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class S_ItemDespawn : pb::IMessage<S_ItemDespawn> {
    private static readonly pb::MessageParser<S_ItemDespawn> _parser = new pb::MessageParser<S_ItemDespawn>(() => new S_ItemDespawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S_ItemDespawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_ItemDespawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_ItemDespawn(S_ItemDespawn other) : this() {
      itemId_ = other.itemId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S_ItemDespawn Clone() {
      return new S_ItemDespawn(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S_ItemDespawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S_ItemDespawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S_ItemDespawn other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      statInfo_ = other.statInfo_ != null ? other.statInfo_.Clone() : null;
      creatureState_ = other.creatureState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positionX" field.</summary>
    public const int PositionXFieldNumber = 3;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "positionY" field.</summary>
    public const int PositionYFieldNumber = 4;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "statInfo" field.</summary>
    public const int StatInfoFieldNumber = 5;
    private global::Google.Protobuf.Protocol.PlayerStatInfo statInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.PlayerStatInfo StatInfo {
      get { return statInfo_; }
      set {
        statInfo_ = value;
      }
    }

    /// <summary>Field number for the "CreatureState" field.</summary>
    public const int CreatureStateFieldNumber = 6;
    private global::Google.Protobuf.Protocol.PlayerState creatureState_ = global::Google.Protobuf.Protocol.PlayerState.PIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.PlayerState CreatureState {
      get { return creatureState_; }
      set {
        creatureState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!object.Equals(StatInfo, other.StatInfo)) return false;
      if (CreatureState != other.CreatureState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (statInfo_ != null) hash ^= StatInfo.GetHashCode();
      if (CreatureState != global::Google.Protobuf.Protocol.PlayerState.PIdle) hash ^= CreatureState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionY);
      }
      if (statInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StatInfo);
      }
      if (CreatureState != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CreatureState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (statInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatInfo);
      }
      if (CreatureState != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CreatureState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.statInfo_ != null) {
        if (statInfo_ == null) {
          StatInfo = new global::Google.Protobuf.Protocol.PlayerStatInfo();
        }
        StatInfo.MergeFrom(other.StatInfo);
      }
      if (other.CreatureState != global::Google.Protobuf.Protocol.PlayerState.PIdle) {
        CreatureState = other.CreatureState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            PositionX = input.ReadFloat();
            break;
          }
          case 37: {
            PositionY = input.ReadFloat();
            break;
          }
          case 42: {
            if (statInfo_ == null) {
              StatInfo = new global::Google.Protobuf.Protocol.PlayerStatInfo();
            }
            input.ReadMessage(StatInfo);
            break;
          }
          case 48: {
            CreatureState = (global::Google.Protobuf.Protocol.PlayerState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterInfo : pb::IMessage<MonsterInfo> {
    private static readonly pb::MessageParser<MonsterInfo> _parser = new pb::MessageParser<MonsterInfo>(() => new MonsterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo(MonsterInfo other) : this() {
      monsterId_ = other.monsterId_;
      name_ = other.name_;
      destinationX_ = other.destinationX_;
      destinationY_ = other.destinationY_;
      statInfo_ = other.statInfo_ != null ? other.statInfo_.Clone() : null;
      creatureState_ = other.creatureState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo Clone() {
      return new MonsterInfo(this);
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 1;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destinationX" field.</summary>
    public const int DestinationXFieldNumber = 3;
    private float destinationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestinationX {
      get { return destinationX_; }
      set {
        destinationX_ = value;
      }
    }

    /// <summary>Field number for the "destinationY" field.</summary>
    public const int DestinationYFieldNumber = 4;
    private float destinationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestinationY {
      get { return destinationY_; }
      set {
        destinationY_ = value;
      }
    }

    /// <summary>Field number for the "statInfo" field.</summary>
    public const int StatInfoFieldNumber = 5;
    private global::Google.Protobuf.Protocol.MonsterStatInfo statInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.MonsterStatInfo StatInfo {
      get { return statInfo_; }
      set {
        statInfo_ = value;
      }
    }

    /// <summary>Field number for the "CreatureState" field.</summary>
    public const int CreatureStateFieldNumber = 6;
    private global::Google.Protobuf.Protocol.MonsterState creatureState_ = global::Google.Protobuf.Protocol.MonsterState.MIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.MonsterState CreatureState {
      get { return creatureState_; }
      set {
        creatureState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterId != other.MonsterId) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestinationX, other.DestinationX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestinationY, other.DestinationY)) return false;
      if (!object.Equals(StatInfo, other.StatInfo)) return false;
      if (CreatureState != other.CreatureState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DestinationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestinationX);
      if (DestinationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestinationY);
      if (statInfo_ != null) hash ^= StatInfo.GetHashCode();
      if (CreatureState != global::Google.Protobuf.Protocol.MonsterState.MIdle) hash ^= CreatureState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DestinationX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DestinationX);
      }
      if (DestinationY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DestinationY);
      }
      if (statInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StatInfo);
      }
      if (CreatureState != global::Google.Protobuf.Protocol.MonsterState.MIdle) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CreatureState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DestinationX != 0F) {
        size += 1 + 4;
      }
      if (DestinationY != 0F) {
        size += 1 + 4;
      }
      if (statInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatInfo);
      }
      if (CreatureState != global::Google.Protobuf.Protocol.MonsterState.MIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CreatureState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterInfo other) {
      if (other == null) {
        return;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DestinationX != 0F) {
        DestinationX = other.DestinationX;
      }
      if (other.DestinationY != 0F) {
        DestinationY = other.DestinationY;
      }
      if (other.statInfo_ != null) {
        if (statInfo_ == null) {
          StatInfo = new global::Google.Protobuf.Protocol.MonsterStatInfo();
        }
        StatInfo.MergeFrom(other.StatInfo);
      }
      if (other.CreatureState != global::Google.Protobuf.Protocol.MonsterState.MIdle) {
        CreatureState = other.CreatureState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            DestinationX = input.ReadFloat();
            break;
          }
          case 37: {
            DestinationY = input.ReadFloat();
            break;
          }
          case 42: {
            if (statInfo_ == null) {
              StatInfo = new global::Google.Protobuf.Protocol.MonsterStatInfo();
            }
            input.ReadMessage(StatInfo);
            break;
          }
          case 48: {
            CreatureState = (global::Google.Protobuf.Protocol.MonsterState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerStatInfo : pb::IMessage<PlayerStatInfo> {
    private static readonly pb::MessageParser<PlayerStatInfo> _parser = new pb::MessageParser<PlayerStatInfo>(() => new PlayerStatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerStatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStatInfo(PlayerStatInfo other) : this() {
      level_ = other.level_;
      classType_ = other.classType_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      mp_ = other.mp_;
      maxMp_ = other.maxMp_;
      attackPower_ = other.attackPower_;
      magicPower_ = other.magicPower_;
      defense_ = other.defense_;
      speed_ = other.speed_;
      jump_ = other.jump_;
      currentExp_ = other.currentExp_;
      totalExp_ = other.totalExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStatInfo Clone() {
      return new PlayerStatInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "classType" field.</summary>
    public const int ClassTypeFieldNumber = 2;
    private global::Google.Protobuf.Protocol.ClassType classType_ = global::Google.Protobuf.Protocol.ClassType.Cnone;
    /// <summary>
    /// 직업명
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.Protocol.ClassType ClassType {
      get { return classType_; }
      set {
        classType_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 4;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 5;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "maxMp" field.</summary>
    public const int MaxMpFieldNumber = 6;
    private int maxMp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    /// <summary>Field number for the "attackPower" field.</summary>
    public const int AttackPowerFieldNumber = 7;
    private int attackPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackPower {
      get { return attackPower_; }
      set {
        attackPower_ = value;
      }
    }

    /// <summary>Field number for the "magicPower" field.</summary>
    public const int MagicPowerFieldNumber = 8;
    private int magicPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicPower {
      get { return magicPower_; }
      set {
        magicPower_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 9;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 10;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "jump" field.</summary>
    public const int JumpFieldNumber = 11;
    private float jump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Jump {
      get { return jump_; }
      set {
        jump_ = value;
      }
    }

    /// <summary>Field number for the "currentExp" field.</summary>
    public const int CurrentExpFieldNumber = 12;
    private int currentExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentExp {
      get { return currentExp_; }
      set {
        currentExp_ = value;
      }
    }

    /// <summary>Field number for the "totalExp" field.</summary>
    public const int TotalExpFieldNumber = 13;
    private int totalExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalExp {
      get { return totalExp_; }
      set {
        totalExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerStatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerStatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (ClassType != other.ClassType) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Mp != other.Mp) return false;
      if (MaxMp != other.MaxMp) return false;
      if (AttackPower != other.AttackPower) return false;
      if (MagicPower != other.MagicPower) return false;
      if (Defense != other.Defense) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Jump, other.Jump)) return false;
      if (CurrentExp != other.CurrentExp) return false;
      if (TotalExp != other.TotalExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) hash ^= ClassType.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (MaxMp != 0) hash ^= MaxMp.GetHashCode();
      if (AttackPower != 0) hash ^= AttackPower.GetHashCode();
      if (MagicPower != 0) hash ^= MagicPower.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Jump != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Jump);
      if (CurrentExp != 0) hash ^= CurrentExp.GetHashCode();
      if (TotalExp != 0) hash ^= TotalExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ClassType);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHp);
      }
      if (Mp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Mp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxMp);
      }
      if (AttackPower != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AttackPower);
      }
      if (MagicPower != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MagicPower);
      }
      if (Defense != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Defense);
      }
      if (Speed != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Speed);
      }
      if (Jump != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Jump);
      }
      if (CurrentExp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrentExp);
      }
      if (TotalExp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TotalExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClassType);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (MaxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMp);
      }
      if (AttackPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackPower);
      }
      if (MagicPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicPower);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Jump != 0F) {
        size += 1 + 4;
      }
      if (CurrentExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentExp);
      }
      if (TotalExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerStatInfo other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ClassType != global::Google.Protobuf.Protocol.ClassType.Cnone) {
        ClassType = other.ClassType;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.MaxMp != 0) {
        MaxMp = other.MaxMp;
      }
      if (other.AttackPower != 0) {
        AttackPower = other.AttackPower;
      }
      if (other.MagicPower != 0) {
        MagicPower = other.MagicPower;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Jump != 0F) {
        Jump = other.Jump;
      }
      if (other.CurrentExp != 0) {
        CurrentExp = other.CurrentExp;
      }
      if (other.TotalExp != 0) {
        TotalExp = other.TotalExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            ClassType = (global::Google.Protobuf.Protocol.ClassType) input.ReadEnum();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 40: {
            Mp = input.ReadInt32();
            break;
          }
          case 48: {
            MaxMp = input.ReadInt32();
            break;
          }
          case 56: {
            AttackPower = input.ReadInt32();
            break;
          }
          case 64: {
            MagicPower = input.ReadInt32();
            break;
          }
          case 72: {
            Defense = input.ReadInt32();
            break;
          }
          case 85: {
            Speed = input.ReadFloat();
            break;
          }
          case 93: {
            Jump = input.ReadFloat();
            break;
          }
          case 96: {
            CurrentExp = input.ReadInt32();
            break;
          }
          case 104: {
            TotalExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterStatInfo : pb::IMessage<MonsterStatInfo> {
    private static readonly pb::MessageParser<MonsterStatInfo> _parser = new pb::MessageParser<MonsterStatInfo>(() => new MonsterStatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterStatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterStatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterStatInfo(MonsterStatInfo other) : this() {
      id_ = other.id_;
      level_ = other.level_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      attackPower_ = other.attackPower_;
      defense_ = other.defense_;
      speed_ = other.speed_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterStatInfo Clone() {
      return new MonsterStatInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 4;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "attackPower" field.</summary>
    public const int AttackPowerFieldNumber = 5;
    private int attackPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackPower {
      get { return attackPower_; }
      set {
        attackPower_ = value;
      }
    }

    /// <summary>Field number for the "defense" field.</summary>
    public const int DefenseFieldNumber = 6;
    private int defense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 7;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 8;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterStatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterStatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Level != other.Level) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (AttackPower != other.AttackPower) return false;
      if (Defense != other.Defense) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (AttackPower != 0) hash ^= AttackPower.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHp);
      }
      if (AttackPower != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AttackPower);
      }
      if (Defense != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Defense);
      }
      if (Speed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Speed);
      }
      if (Exp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (AttackPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackPower);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterStatInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.AttackPower != 0) {
        AttackPower = other.AttackPower;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 40: {
            AttackPower = input.ReadInt32();
            break;
          }
          case 48: {
            Defense = input.ReadInt32();
            break;
          }
          case 61: {
            Speed = input.ReadFloat();
            break;
          }
          case 64: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      itemId_ = other.itemId_;
      ownerId_ = other.ownerId_;
      canRootAnyOne_ = other.canRootAnyOne_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "ownerId" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private int ownerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    /// <summary>Field number for the "canRootAnyOne" field.</summary>
    public const int CanRootAnyOneFieldNumber = 3;
    private bool canRootAnyOne_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanRootAnyOne {
      get { return canRootAnyOne_; }
      set {
        canRootAnyOne_ = value;
      }
    }

    /// <summary>Field number for the "positionX" field.</summary>
    public const int PositionXFieldNumber = 4;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "positionY" field.</summary>
    public const int PositionYFieldNumber = 5;
    private float positionY_;
    /// <summary>
    /// TODO : 여기서 세부 아이템 정보를 관리한다.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (CanRootAnyOne != other.CanRootAnyOne) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (OwnerId != 0) hash ^= OwnerId.GetHashCode();
      if (CanRootAnyOne != false) hash ^= CanRootAnyOne.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (OwnerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OwnerId);
      }
      if (CanRootAnyOne != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanRootAnyOne);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PositionY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (OwnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerId);
      }
      if (CanRootAnyOne != false) {
        size += 1 + 1;
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.OwnerId != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.CanRootAnyOne != false) {
        CanRootAnyOne = other.CanRootAnyOne;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            OwnerId = input.ReadInt32();
            break;
          }
          case 24: {
            CanRootAnyOne = input.ReadBool();
            break;
          }
          case 37: {
            PositionX = input.ReadFloat();
            break;
          }
          case 45: {
            PositionY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillInfo : pb::IMessage<SkillInfo> {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.Protocol.ProtocolReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo(SkillInfo other) : this() {
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo Clone() {
      return new SkillInfo(this);
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
